
# --- –ë–õ–û–ö 1: –í–°–ï –ò–ú–ü–û–†–¢–´ ---
import logging
import os
import yt_dlp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)

from config import YT_BOT_TOKEN


# --- –ë–õ–û–ö 2: –ù–ê–°–¢–†–û–ô–ö–ò ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (Telegram Bot API - 50 MB)
TELEGRAM_LIMIT_BYTES = 50 * 1024 * 1024


# --- –ë–õ–û–ö 3: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ. –Ø –º–æ–≥—É –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–æ–ª–∏–∫–∏ —Å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, —Ç–∞–∫–∏—Ö –∫–∞–∫ **YouTube, VK, RuTube** –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö.\n\n"     
        "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
        "1. –¢—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.\n"
        "2. –Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤ —Ä–∞–∑–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ (MP3).\n"
        "3. –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç **50 –ú–ë**, —è –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ–≥–æ —Ç–µ–±–µ –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∂–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'!"
    )
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=welcome_text,
        parse_mode='Markdown'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    chat_id = update.effective_chat.id
    url = update.message.text

    context.user_data['url'] = url

    message = await context.bot.send_message(chat_id=chat_id, text="üîé –ü—Ä–∏–Ω—è–ª —Å—Å—ã–ª–∫—É! –ò—â—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã...")

    try:
        ydl_opts = {'quiet': True}
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)

        keyboard = []
        # --- –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ ---
        for f in info.get('formats', []):
            if (
                f.get('vcodec') != 'none' and f.get('acodec') != 'none'
                and f.get('ext') == 'mp4'
                and f.get('filesize') and f.get('filesize') < TELEGRAM_LIMIT_BYTES
            ):
                label = f"üìπ {f['height']}p ({f['filesize'] / 1024 / 1024:.1f} –ú–ë)"
                keyboard.append([InlineKeyboardButton(label, callback_data=f"v:{f['format_id']}")])

        # --- –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞—É–¥–∏–æ (MP3) ---
        best_audio = next((f for f in info.get('formats', []) if f.get('acodec') != 'none' and f.get('vcodec') == 'none'), None)
        if best_audio and best_audio.get('filesize') and best_audio.get('filesize') < TELEGRAM_LIMIT_BYTES:
            label = f"üéµ MP3 ({best_audio['filesize'] / 1024 / 1024:.1f} –ú–ë)"
            keyboard.append([InlineKeyboardButton(label, callback_data=f"a:{best_audio['format_id']}")])

        if not keyboard:
            await message.edit_text("–ù–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–º–µ–Ω—å—à–µ 50 –ú–ë).")
            return

        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.edit_text(f"–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ '{info['title']}':", reply_markup=reply_markup)

    except Exception as e:
        await message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ {url}: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    url = context.user_data.get('url')

    if not url:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –∑–∞–Ω–æ–≤–æ.")
        return

    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")

    file_type, format_id = callback_data.split(':')
    file_path = "" # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—É—Ç–∏

    try:
        if file_type == 'v': # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≤–∏–¥–µ–æ
            file_path = 'video_for_telegram.mp4'
            ydl_opts = {
                # --- !! –í–†–ï–ú–ï–ù–ù–´–ô –§–ò–ö–° –î–õ–Ø –û–®–ò–ë–ö–ò 403 !! ---
                'format': format_id,
                'outtmpl': 'video_for_telegram.%(ext)s',
            }
        else: # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∞—É–¥–∏–æ
            file_path = 'audio_for_telegram.mp3'
            ydl_opts = {
                'format': format_id,
                'outtmpl': 'audio_for_telegram.%(ext)s',
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192',
                }],
            }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

        await query.edit_message_text("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")

        with open(file_path, 'rb') as f:
            if file_type == 'v':
                await context.bot.send_video(chat_id=query.message.chat_id, video=f, supports_streaming=True)
            else:
                await context.bot.send_audio(chat_id=query.message.chat.id, audio=f)

        os.remove(file_path)
        await query.edit_message_text("–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—à—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É.")

    except Exception as e:
        if os.path.exists(file_path):
            os.remove(file_path)
        await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è {url} —Å —Ñ–æ—Ä–º–∞—Ç–æ–º {format_id}: {e}")


# --- –ë–õ–û–ö 4: –ó–ê–ü–£–°–ö ---

if __name__ == '__main__':
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Ç–æ–∫–µ–Ω –∏–∑ "—Å–µ–π—Ñ–∞"
    application = ApplicationBuilder().token(YT_BOT_TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç v2.2 (—á–∏—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞) –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()
